#include "TM1637Display.h"
#include "Adafruit_NeoPixel.h"
#include "NTPClient.h"
#include "WiFiManager.h"
#include "DHT.h"

// Broche de l'Arduino connectée aux NeoPixels
#define PIN 17
#define display_CLK 18
#define display_DIO 19
#define DHT_PIN 4

// Nombre de NeoPixels connectés à l'Arduino
#define NUMPIXELS 35

// ========================VARIABLES UTILES=============================
int UTC = 2; // UTC = décalage horaire en heures (HEURE D'ÉTÉ) [Par exemple : Paris UTC+2 => UTC=2]
int Display_backlight = 2; // Réglage de la luminosité de l'afficheur 0 à 7
int led_ring_brightness = 10; // Réglage de la luminosité de la LED annulaire de 0 à 255
int led_ring_brightness_flash = 250; // Réglage de la luminosité de la LED annulaire en mode flash de 0 à 255

// ========================================================================
// ========================================================================

const long utcOffsetInSeconds = 3600; // Décalage horaire UTC + 1H en secondes

// Réglage de la couleur de la LED annulaire
#define red 0
#define green 20
#define blue 255

// Lors de la configuration de la bibliothèque NeoPixel, nous indiquons le nombre de pixels,
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
TM1637Display display(display_CLK, display_DIO);
int flag = 0;

DHT dht(DHT_PIN, DHT22);
unsigned long temperatureDisplayTimer = 0;
bool isTemperatureDisplayActive = false;
bool isTimeDisplayActive = true;

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", utcOffsetInSeconds * UTC);

unsigned long displayTimer = 0;

void setup() {
  pinMode(25, OUTPUT);
  pinMode(26, OUTPUT);

  Serial.begin(115200);
  Serial.println("\n Démarrage");

  WiFiManager manager;
  NTPClient timeClient(ntpUDP, "pool.ntp.org", utcOffsetInSeconds * UTC);
  //manager.resetSettings();

  manager.setTimeout(180);
  // Récupère le SSID et le mot de passe et tente de se connecter, si la connexion réussit, démarre un point d'accès avec le nom "IRON_MAN_ARC" et attend dans une boucle bloquante la configuration
  bool res = manager.autoConnect("ARC_REACTOR_01", "password");

  if (!res) {
    Serial.println("Échec de la connexion et délai d'attente dépassé");
    ESP.restart(); // Redémarrage pour réessayer
  }

  dht.begin();
  display.setBrightness(Display_backlight);
  pixels.begin(); // INITIALISATION de l'objet pixels NeoPixel
  pixels.setBrightness(led_ring_brightness);

  for (int i = 0; i < 35; i++) {
    pixels.setPixelColor(i, pixels.Color(red, green, blue));
    pixels.show();
    delay(50);
  }
  display_cuckoo_start(); // défilement chiffres de 0 à 88
  flash_cuckoo_start(); // flash blanc
}

void loop() {
  // Mettre à jour l'heure
  timeClient.update();

  if (isTimeDisplayActive) {
    // Afficher l'heure pendant 10 secondes
    display.showNumberDecEx(timeClient.getHours(), 0b01000000, true, 2, 0);
    display.showNumberDecEx(timeClient.getMinutes(), 0b00000000, true, 2, 2);

    // Désactiver l'affichage de la température
    isTemperatureDisplayActive = false;
  } else if (isTemperatureDisplayActive) {
    // Afficher la température pendant 5 secondes
    displayTemperature();

    // Désactiver l'affichage de l'heure
    isTimeDisplayActive = false;
  }

  // Gérer les délais d'affichage
  unsigned long currentTime = millis();
  if (currentTime - displayTimer >= 10000 && isTimeDisplayActive) {
  // Activer l'affichage de la température après 10 secondes
  isTemperatureDisplayActive = true;
  isTimeDisplayActive = false;
  displayTimer = currentTime;
} else if (currentTime - displayTimer >= 5000 && isTemperatureDisplayActive) {
  // Activer l'affichage de l'heure après 5 secondes
  isTemperatureDisplayActive = false;
  isTimeDisplayActive = true;
  displayTimer = currentTime;
}


  unsigned long epochTime = timeClient.getEpochTime();
  struct tm *ptm = gmtime((time_t *)&epochTime);
  int currentYear = ptm->tm_year + 1900;
  int monthDay = ptm->tm_mday;
  int currentMonth = ptm->tm_mon + 1;

  if ((currentMonth * 30 + monthDay) >= 121 && (currentMonth * 30 + monthDay) < 331) {
    timeClient.setTimeOffset(utcOffsetInSeconds * UTC); // Changement de l'heure d'été - Été
  } else {
    timeClient.setTimeOffset((utcOffsetInSeconds * UTC) - 3600); // Changement de l'heure d'été - Hiver
  }

  // Allumer la LED annulaire en bleu
  pixels.clear(); // Éteindre toutes les LED
  blue_light();

  // Allumer les LED bleues
  digitalWrite(25, 1);
  digitalWrite(26, 1);

  // Animation toutes les heures
  if (timeClient.getMinutes() == 0 && flag == 0) {
    display_cuckoo(); // défilement chiffres 0 à 88
    flash_cuckoo(); // flash blanc
    flag = 1;
  }
  if (timeClient.getMinutes() >= 1) {
    flag = 0;
  }
}

void blue_light() {
  pixels.setBrightness(led_ring_brightness);
  for (int i = 0; i < 36; i++) {
    pixels.setPixelColor(i, pixels.Color(red, green, blue));
  }
  pixels.show();
}

void flash_cuckoo() {
  pixels.setBrightness(led_ring_brightness_flash);
  for (int i = 0; i < 36; i++) {
    pixels.setPixelColor(i, pixels.Color(250, 250, 250));
  }
  pixels.show();

  for (int i = led_ring_brightness_flash; i > 10; i--) {
    pixels.setBrightness(i);
    pixels.show();
    delay(7);
  }
  blue_light();
}

void flash_cuckoo_start() {
  pixels.setBrightness(led_ring_brightness_flash);
  for (int i = 0; i < 36; i++) {
    pixels.setPixelColor(i, pixels.Color(250, 250, 250));
  }
  pixels.show();

  for (int i = led_ring_brightness_flash; i > 10; i--) {
    pixels.setBrightness(i);
    pixels.show();
    delay(7);
  }
  blue_light();
}

void display_cuckoo() {
  for (int i = 0; i < 89; i++) {
    display.showNumberDecEx(i, 0b01000000, true, 2, 0);
    display.showNumberDecEx(i, 0b00000000, true, 2, 2);
    delay(7);
  }
}

void display_cuckoo_start() {
  for (int i = 0; i < 89; i++) {
    display.showNumberDecEx(i, 0b01000000, true, 2, 0);
    display.showNumberDecEx(i, 0b00000000, true, 2, 2);
    delay(7);
  }
}

void displayTemperature() {
  // Lire la température à partir du capteur DHT
  float temperature = dht.readTemperature();

  // Extraire la partie entière et la partie décimale
  int integerPart = static_cast<int>(temperature);
  int decimalPart = static_cast<int>((temperature - integerPart) * 10);

  // Afficher la température avec deux décimales
  display.showNumberDecEx(integerPart, 0b01000000, true, 2, 0);
  display.showNumberDecEx(decimalPart, 0b00000000, true, 1, 2);

   // Afficher l'unité "°C" à la fin de l'afficheur
  const uint8_t letterC[] = { // Définition des segments pour afficher la lettre C
    SEG_A | SEG_F | SEG_E | SEG_D, // Segments pour le premier chiffre (C)
  };
  display.setSegments(letterC, 1, 3);

}
